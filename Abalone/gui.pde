/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void exit_action(GButton source, GEvent event) { //_CODE_:exit_btn:535895:
  exit();
} //_CODE_:exit_btn:535895:

public void hh_action(GButton source, GEvent event) { //_CODE_:hh_btn:759932:
  init();
  player.type = PlayerType.HUMAN;
  ennemy.type = PlayerType.HUMAN;
  start = millis();
} //_CODE_:hh_btn:759932:

public void hm_action(GButton source, GEvent event) { //_CODE_:hm_btn:265926:
  hideMainButtons();
  background(200);
  showSecondaryButtons();
  start = millis();
} //_CODE_:hm_btn:265926:

public void mm_action(GButton source, GEvent event) { //_CODE_:mm_btn:788674:
  init();
  player.type = PlayerType.MACHINE;
  ennemy.type = PlayerType.MACHINE;
  
  start = millis();
} //_CODE_:mm_btn:788674:

public void help_action(GButton source, GEvent event) { //_CODE_:help_btn:657787:
  help_wnd.setVisible(true);
} //_CODE_:help_btn:657787:

public void cancel_action(GButton source, GEvent event) { //_CODE_:cancel_btn:886953:
  hideSecondaryButtons();
  showMainButtons();
} //_CODE_:cancel_btn:886953:

public void as_black_action(GButton source, GEvent event) { //_CODE_:as_black_btn:943426:
  hideSecondaryButtons();
  init();
  player.type = PlayerType.HUMAN;
  ennemy.type = PlayerType.MACHINE;
} //_CODE_:as_black_btn:943426:

public void as_white_action(GButton source, GEvent event) { //_CODE_:as_white_btn:446063:
  hideSecondaryButtons();
  init();
  player.type = PlayerType.MACHINE;
  ennemy.type = PlayerType.HUMAN;
} //_CODE_:as_white_btn:446063:

public void om_action(GButton source, GEvent event) { //_CODE_:om_btn:573332:
  init();
  player.type = PlayerType.OTHER_MACHINE;
  ennemy.type = PlayerType.MACHINE;
  
  cam = new Capture(this, 1280, 720, 10);
  cam.start();
  WHITE = color(255, 0, 0);
  previsionNode = new Node(null, null);
  previsionNode.newPlayerPawns = cloneIVectorList(this.blackPawns);
  previsionNode.newEnnemyPawns = cloneIVectorList(this.whitePawns);
  previsionNode.nodes = new ArrayList<Node>();
  buildTree(1, previsionNode);
  possibleNodes = cloneNodesList(previsionNode.nodes);
  this.playerPawns = this.blackPawns;
  this.ennemyPawns = this.whitePawns;
  
  start = millis();
} //_CODE_:om_btn:573332:

synchronized public void draw_help(PApplet appc, GWinData data) { //_CODE_:help_wnd:256111:
  appc.background(230);
} //_CODE_:help_wnd:256111:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("Abalone");
  exit_btn = new GButton(this, 125, 420, 150, 50);
  exit_btn.setText("EXIT");
  exit_btn.setTextBold();
  exit_btn.addEventHandler(this, "exit_action");
  hh_btn = new GButton(this, 125, 20, 150, 50);
  hh_btn.setText("Human VS Human");
  hh_btn.setTextBold();
  hh_btn.addEventHandler(this, "hh_action");
  hm_btn = new GButton(this, 125, 100, 150, 50);
  hm_btn.setText("Human VS AI");
  hm_btn.setTextBold();
  hm_btn.addEventHandler(this, "hm_action");
  mm_btn = new GButton(this, 125, 180, 150, 50);
  mm_btn.setText("AI VS AI");
  mm_btn.setTextBold();
  mm_btn.addEventHandler(this, "mm_action");
  help_btn = new GButton(this, 125, 340, 150, 50);
  help_btn.setText("Help");
  help_btn.setTextBold();
  help_btn.addEventHandler(this, "help_action");
  cancel_btn = new GButton(this, 125, 260, 150, 50);
  cancel_btn.setText("Cancel");
  cancel_btn.setTextBold();
  cancel_btn.addEventHandler(this, "cancel_action");
  as_black_btn = new GButton(this, 125, 100, 150, 50);
  as_black_btn.setText("Play as Black");
  as_black_btn.setTextBold();
  as_black_btn.addEventHandler(this, "as_black_action");
  as_white_btn = new GButton(this, 125, 180, 150, 50);
  as_white_btn.setText("Play as White");
  as_white_btn.setTextBold();
  as_white_btn.addEventHandler(this, "as_white_action");
  om_btn = new GButton(this, 125, 260, 150, 50);
  om_btn.setText("Machine vs Machine");
  om_btn.setTextBold();
  om_btn.addEventHandler(this, "om_action");
  help_wnd = GWindow.getWindow(this, "Help", 700, 250, 300, 300, JAVA2D);
  help_wnd.noLoop();
  help_wnd.setActionOnClose(G4P.CLOSE_WINDOW);
  help_wnd.addDrawHandler(this, "draw_help");
  label2 = new GLabel(help_wnd, 10, 70, 285, 43);
  label2.setText("To make a scrrenshot of the current board use 's'.");
  label2.setTextBold();
  label2.setOpaque(false);
  label3 = new GLabel(help_wnd, 10, 120, 278, 46);
  label3.setText("To pause/resume the game use the spacebar.");
  label3.setTextBold();
  label3.setOpaque(false);
  label1 = new GLabel(help_wnd, 10, 19, 286, 51);
  label1.setText("To change the level of difficulty in AI mode use the UP and DOWN arrow keys to respectively augment or diminish the difficulty level.");
  label1.setTextBold();
  label1.setOpaque(false);
  label4 = new GLabel(help_wnd, 10, 170, 282, 46);
  label4.setText("To cancel your last move use the LEFT arrow key.");
  label4.setTextBold();
  label4.setOpaque(false);
  label5 = new GLabel(help_wnd, 10, 220, 286, 47);
  label5.setText("To abandon a game and return to the menu use 'q'.");
  label5.setTextBold();
  label5.setOpaque(false);
  help_wnd.loop();
}

// Variable declarations 
// autogenerated do not edit
GButton exit_btn; 
GButton hh_btn; 
GButton hm_btn; 
GButton mm_btn; 
GButton help_btn; 
GButton cancel_btn; 
GButton as_black_btn; 
GButton as_white_btn; 
GButton om_btn; 
GWindow help_wnd;
GLabel label2; 
GLabel label3; 
GLabel label1; 
GLabel label4; 
GLabel label5; 
